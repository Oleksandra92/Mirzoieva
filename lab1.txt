ЛАБОРАТОРНА 
РОБОТА 1.1 
КЕРУВАННЯВЕРСІЯМИЗА 
ДОПОМОГОЮ GIT 

Мета 
роботи: вивчити 
та 
закріпити 
на 
практиці 
можливості 
системи 
керування 
версіями, одержати 
практичний 
досвід 
у 
використанні Git та GitHub. 

Обладнання: 

. 
ПК 
ІВМ 
РС x86 CPU з 
встановленою 
операційною 
системою; 

. 
доступдо 
мережіінтернет. 

1.1.1 Теоретичнівідомості 
Система 
керування 
версіями (англ. source code 
management, SCM) — програмний 
інструмент 
для 
керування 
версіями 
одиниці 
інформації: вихідного 
коду 
програми, скрипту, 
веб-сторінки, веб-сайту, 3D моделі, текстовогодокументутощо. 

Система 
керування 
версіями — це 
потужний 
інструмент, 
який 
дозволяє 
одночасно, без 
перешкод 
один 
одному, проводити 
роботунадгруповими 
проектами. 

Системи 
керування 
версіями 
зазвичай 
використовуються 
при 
розробці 
програмного 
забезпечення 
для 
відстеження, 
документування 
та 
контролю 
над 
поступовими 
змінами 
в 
електронних 
документах: у 
коді 
додатків, кресленнях, електронних 
моделях 
та 
інших 
документах, над 
змінами 
яких 
одночасно 
працюютьдекількалюдей. 

Кожна 
версія 
позначається 
унікальною 
цифрою 
чи 
літерою, 
зміни 
документу 
занотовуються. Зазвичай 
також 
зберігається 
автор 
зробленоїзмінитаїїчас. 

Інструменти 
для 
контролю 
версій 
входять 
до 
складу 
багатьох 
інтегрованихсередовищрозробки. 

Системи 
керування 
версіями 
існують 
двох 
основних 
типів: з 
централізованимсховищем 
тарозподіленим. 

Централізовані 
системи 
контролю 
версії. Централізована 
система 
контролю 
версії (клієнт-серверна) — система, дані 
в 
якій 
зберігаються 
в 
єдиному «серверному» сховищі. Весь 
обмін 
файлами 
відбувається 
з 
використанням 
центрального 
сервера. Є 



можливість 
створення 
та 
роботи 
з 
локальними 
репозиторіями 
(робочими 
копіями). 

Переваги: 

– загальнанумерація 
версій; 
– данізнаходятьсянаодномусервері; 
– можливареалізаціяфункції 
блокування 
файлів; 
– можливістькеруваннядоступомдо 
файлів. 
Недоліки: 
– необхідність 
мережевого 
з'єднання 
для 
оновлення 
робочої 
копіїчизбереження 
змін. 
До 
таких 
систем 
відносять Subversion, Team Foundation 
Server. 

Розподілені 
системи 
контролю 
версії. Розподілена 
система 
контролю 
версії (англ. Distributed Version Control System, DVCS) — 
система, яка 
використовує 
замість 
моделі 
клієнт-сервер, 
розподілену 
модель 
зберігання 
файлів. Така 
система 
не 
потребує 
сервера, аджевсіфайлизнаходятьсяна 
кожному 
зкомп'ютерів. 

Переваги: 

– кожний 
з 
розробників 
працює 
зі 
своїм 
власним 
репозиторієм; 
– рішення 
щодо 
злиття 
віток 
приймається 
керівником 
проекту; 
– немаєпотребивмережевому 
з'єднанні. 
Недоліки: 
– немаєможливості 
контролюдоступу 
дофайлів; 
– відсутнязагальна 
нумерація 
версії 
файла; 
– значнобільша 
кількістьнеобхідногодискового 
простору; 
– немаєможливості 
блокування 
файлів. 
До 
таких 
систем 
відносять Git, Mercurial, SVK, Monotone, 
Codeville, BitKeeper. 

Система 
контролю 
дозволяє 
зберігати 
попередні 
версії 
файлів 
та 
завантажувати 
їх 
за 
потребою. Вона 
зберігає 
повну 
інформацію 
про 
версію 
кожного 
з 
файлів, а 
також 
повну 
структуру 
проекту 
на 
всіх 
стадіях 
розробки. Місце 
зберігання 
даних 
файлів 
називають 
репозиторієм. В 
середині 
кожного 
з 
репозиторіїв 
можуть 
бутиствореніпаралельнілініїрозробки — гілки. 

Гілки, зазвичай, використовують 
для 
зберігання 
експериментальних, незавершених (alpha, beta) та 
повністю 



робочих 
версій 
проекту (final). Більшість 
систем 
контролю 
версії 
дозволяють 
кожному 
з 
об'єктів 
присвоювати 
теги, за 
допомогою 
яких 
можна 
формувати 
нові 
гілки 
тарепозиторії. 

Використання 
системи 
контролю 
версії 
є 
необхідним 
для 
роботи 
над 
великими 
проектами, над 
якими 
одночасно 
працює 
велика 
кількість 
розробників. Системи 
контролю 
версії 
надають 
ряддодаткових 
можливостей: 

– можливістьствореннярізних 
варіантіводногодокументу; 
– документування 
всіх 
змін (коли 
і 
ким 
було 
змінено/додано, 
хтоякий 
рядок 
змінив); 
– реалізує 
функцію 
контролю 
доступу 
користувачів 
до 
файлів. Єможливістьйого 
обмеження; 
– дозволяє 
створювати 
документацію 
проекту 
з 
поетапним 
записомзмін 
взалежностівідверсії; 
– дозволяєдаватипояснення 
до 
змін 
та 
документуватиїх. 
Cловник 
основнихтермінів-сленгів: 

– транк (trunk) — основнагілкакоду; 
– бранч (branch) — відгалуження; 
– чекін (Check in (submit, commit)) — відправлення 
коду 
в 
репозиторій; 
– чекаут (Check out) — одержаннязміни 
зрепозиторію; 
– конфлікти — виникають, коли 
кілька 
людей 
правлять 
один 
ітойжекод, конфліктиможна 
вирішувати; 
– патч — шматок 
з 
записаними 
змінами, які 
можна 
застосуватидосховищазкодом. 
1.1.2 Порядок 
виконанняроботи 
Для 
керування 
версіями 
розробки 
програмного 
забезпечення 
обраносервіс GitHub. 

Переваги: 

– простийспосібреєстрації; 
– адаптовані 
під 
розповсюдженні 
версії 
операційних 
систем 
клієнти; 
– простий 
спосіб 
синхронізації 
між 
сервісом 
та 
локальною 
версією; 
– підтримкабагатьох 
мовпрограмування; 
– можливістьвідновленнярепозиторіюпіслявидалення. 
Недоліки: 

– для windows необхідний NET Framework 4.0; 
– ручнасинхронізація; 
– для 
проекту 
що 
складається 
з 
декількох 
директорій, 
потрібно 
створити 
відповідно 
декілька 
репозиторіїв 
у 
системі 
та 
відслідковувати 
кожен 
зних; 
– невірне 
відображення 
кирилиці 
після 
відновлення 
з 
віддаленогорепозиторію. 
Реєстраціяу 
системі 


1 Зайтинасайт https://github.com/. 
2 Натиснутина 
кнопку SING UP FOR GitHub (див. рис. 1.1.1) 

Рисунок 1.1.1 – Кнопкадляреєстраціїучасникавсистемі
3 Заповнити 
відповідні 
поля 
форми 
реєстрації (див. рис. 

1.1.2) 


Рисунок 1.1.2 – Формареєстраціїучасника 


4 Після 
реєстрації 
відкриється 
головна 
форма 
системи, де 
є 
можливість 
створити 
новий 
проект 
та 
завантажити 
клієнт 
відповіднодовашоїопераційноїсистеми (див. рис. 1.1.3). 


Рисунок 1.1.3 -Головна 
формакеруваннясистемою 



5 Встановлення Git. Перед 
початком 
використання Git, 
необхідно 
встановити 
його 
на 
Вашому 
комп’ютері. Встановлення 
Git на Linux за 
допомогою 
бінарного 
пакету -через 
основний 
менеджер 
управління 
пакетами, що 
йде 
з 
вашим 
дистрибутивом 
(для Debian-подібного 
дистрибутиву, такогояк Ubuntu): 

$ sudo apt-get install git 

Інсталяція 
на Windows: є 
декілька 
шляхів 
встановити Git під 
Windows. Найофіційніша 
збірка 
доступна 
для 
завантаження 
з 
сайту 
Git. Перейдіть 
до http://git-scm.com/download/win і 
завантаження 
почнеться 
автоматично. 

6 Початкове 
налаштування Git. Налаштування 
потрібно 
виконати 
лише 
один 
раз (налаштування 
залишаються 
між 
оновленнями). Встановлення 
імені 
користувача 
та 
адреси 
електронноїпошти (кожен 
коміт 
в Git використовує 
цюінформацію 
і 
вона 
включенау 
комміти): 

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com 

Перевірка 
налаштувань – виконати 
команду git config --list, 
щоб 
переглянутивсіналаштування, котрі Git встановив. 

7 Створення Git-репозіторія. Для 
створення Git репозиторію 
використовують 
два 
основних 
підходи. Перший 
приймає 
існуючий 
проект 
або 
каталог 
і 
імпортує 
його 
в Git. Другий 
клонує 
існуючий 
репозіторій Git зіншогосервера. 

Ініціалізація 
репозіторія 
в 
існуючому 
каталозі: якщо 
ви 
починаєте 
використовувати Git для 
існуючого 
проекту, вам 
треба 
зайтивкаталогпроекту 
та 
виконати: 

$ git init 

Це 
створить 
новий 
підкаталог .git, який 
містить 
всі 
необхідні 
файли 
вашого 
репозіторія -скелет Git-репозиторія. На 
даний 
момент, упроектіще 
нічогоне 
відстежується. 

Якщо 
необхідно 
додати 
існуючі 
файли 
під 
версійний 
контроль, необхідно 
проіндексувати 
ці 
файли 
і 
зробити 
перший 
коміт. Це 
можна 
зробити 
за 
допомогою 
декількох 
команд git add, 
що 
визначають 
файли, за 
якими 
необхідно 
слідкувати, після 
чого 
треба 
виконати git commit: 
$ git add *.c$ git add LICENSE$ git commit -m 'Перша 
версія 
проекту' 


Клонування 
існуючого 
репозиторію: для 
отримання 
копії 
існуючого Git репозиторію – наприклад, проекту, в 
якому 
ви 
хочете 
прийняти 
участь – потрібна 
команда git clone. Git отримує 
повну 
копію 
майже 
всіх 
даних, що 
є 
у 
сервера. Кожна 
версія 
кожного 
файлу 
в 
історії 
проекту 
витягується 
автоматично, коли 
ви 
виконується git clone. Якщо 
щось 
станеться 
з 
диском 
серверу, 
зазвичай 
можна 
використати 
майже 
будь-який 
з 
клонів 
на 
будьякому 
клієнті 
щоб 
повернути 
сервер 
до 
стану 
на 
момент 
клонування. 

Щоб 
клонувати 
репозиторій 
треба 
використати 
команду git 
clone [url]. Наприклад, дляклонування 
бібліотеки Git libgit2: 

$ git clone https://github.com/libgit2/libgit2 

Це 
створить 
директорію 
під 
назвою “libgit2”, проведе 
ініціалізацію 
директорії .git, забере 
всі 
дані 
для 
репозиторію, та 
приведедиректоріюдо 
стануостанньоїверсії. 

Якщо 
необхідно 
зробити 
клон 
репозиторія 
в 
директорію 
з 
іншоюназвою, можна 
задатиїїунаступномупараметрікоманди: 

$ git clone https://github.com/libgit2/libgit2 mylibgit 

Ця 
команда 
робить 
те 
саме, що 
й 
попередня, тільки 
цільова 
директоріяназивається mylibgit. 

Git має 
декілька 
різних 
протоколів 
передачі 
даних, які 
можна 
використовувати: Попередній https://, git:// або 
user@server:шлях/до/репозиторію.git, що 
використовує SSH 
протокол. 

8 Створити 
проект 
з 
кількома 
файлами, синхронізувати 
його 
з 
сайтом. Якщо 
у 
вас 
вже 
є 
локальний 
репозиторій Git і 
ви 
хочете 
його 
викласти 
в 
загальний 
доступ, то 
спочатку 
необхідно 
створити 
віддалений 
репозиторій (наприклад 
на GitHub), а 
потім 
виконати 
команди 
наведені 
нижче, змінивши 
відповідно 
назву 
вашого 
репозиторію. 

Зв’язуваннялокального 
репозиторіюзвіддаленим: 

$ git remote add origin https://github.com/n0tb0dy/UpRemote.git 

Публікуваннявітки master у 
віддаленийрепозиторій: 

$ git push -u origin master 

9 Внести 
зміни 
до 
проекту. Відобразити 
зміни 
у 
проекті 
на 
сайті. Додаваннявсіх 
файлів (втомучислііпапок): 


$ git add .
$ git commit –m ‘додавання 
файлів’ 

Встановлення 
зв'язку 
з 
віддаленим 
репозиторієм, обчислення 
локальних 
змін 
відсутніх 
в 
ньому, і 
їх 
передачі 
в 
віддалений 
репозиторій: 

$ git push 

10 Внестизмінина 
сайтіівідобразитиїх 
локально 
впроекті. 
Якщо 
ваша 
гілка 
налаштована 
слідкувати 
за 
віддаленою 
гілкою, це 
можна 
виконати 
з 
допомогою 
команди git pull для 
автоматичного 
отримання 
змін 
та 
злиття 
віддаленої 
гілки 
до 
поточної 
гілки (табл. 
1.1.1). 

11 Додатичужийпроект. 
Основні 
команди git наведено 
в 
табл. 1.1.1, дія 
команд 
в 


системі git показана 
на 
рис. 1.1.4. 
Детальна 
інформація 
про 
можливості 
роботи 
з Git 
https://git-scm.com/book/uk/v2, основні 
командиhttp://www.fandroid.info/shpargalka-po-komandam-git/. 
-
-
Таблиця 1.1.1 -Основні 
команди git 

Команда 
Призначення 
git add додає 
вміст 
робочої 
директорії 
в 
індекс (staging area) для 
подальшого commit 
git status показує 
стану 
файлів 
в 
робочій 
директорії 
і 
індексі: які 
файли 
змінені, але 
не 
додані 
в 
індекс; які 
очікують 
комітів 
в 
індексі. 
git commit 
бере 
всі 
дані, додані 
в 
індекс 
за 
допомогою git add, і 
зберігає 
їх 
зліпок 
у 
внутрішній 
базі 
даних, а 
потім 
переміщує 
вказівник 
поточної 
гілки 
на 
цей 
зліпок. Ключі: 
-a для 
додавання 
всіх 
змін 
в 
індекс 
без 
використання git add, 
-m для 
передачі 
повідомлення 
коммітів 
без 
запуску 
редактора. 
git fetch зв'язується 
з 
віддаленим 
репозиторієм 
і 
забирає 
з 
нього 
всі 
зміни, 
яких 
поки 
немає 
і 
зберігає 
їх 
локально. 
git pull 
працює 
як 
комбінація 
команд git fetch і git merge, тобто Git 
спочатку 
забирає 
зміни 
із 
зазначеного 
віддаленого 
сховища, а 
потім 
намагається 
злити 
їх 
з 
поточної 
гілкою. 
git push 
використовується 
для 
встановлення 
зв'язку 
з 
віддаленим 
репозиторієм, обчислення 
локальних 
змін 
відсутніх 
в 
ньому, і 
їх 
передачі 
в 
вищезгаданий 
репозиторій. 


Рисунок 1.1.4 -Командипереміщенняданих Git 
Отже, в 
результаті 
взаємодії 
з 
системою, стало 
можливим 
відслідковувати 
зміни 
файлів 
проекту. Складність 
системи 
не 
дозволяє 
повністю 
автоматизувати 
внесення 
змін, але 
слід 
розуміти 
що 
зміни 
у 
проекті 
відбуваються 
під 
контролем 
розробника, і 
він 
самостійно 
можедодати 
доспискузмінвнесеннінимкорективи. 

12 Оформитизвіт. 

1.1.3 Зміст 
звіту 
Звітповинен 
містити: 

. 
титульнийаркуш; 

. 
мету 
роботиізавдання; 

. 
покроковий 
опис 
роботи, копії 
екранів 
з 
результатами 
виконаноїроботи; 

. 
висновки. 

Запитаннядлясамоконтролю: 

Тривалість 
заняття: 2 год. 


